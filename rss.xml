<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>0x157</title><description>?</description><link>https://fuwari.vercel.app/</link><language>en</language><item><title>AKASEC CTF - Matry-Steg-oshka [Misc]</title><link>https://fuwari.vercel.app/posts/akasec/matrystegoshka/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/akasec/matrystegoshka/</guid><pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::warning[Description]
&lt;strong&gt;I hope you do not get a headache.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author: d33znu75&lt;/strong&gt;
:::&lt;/p&gt;
&lt;p&gt;This weekend, I played in the &lt;code&gt;AKASEC CTF&lt;/code&gt; and managed to solve the hardest miscellaneous challenge in the competition, which only six teams solved. As much as I want to call this challenge guessy, it really wasn&apos;t after the author released two hints. Overall, I enjoyed this challenge because it taught me something new.&lt;/p&gt;
&lt;p&gt;We have a file named &lt;code&gt;National_Anthem_of_Palestine.wav&lt;/code&gt;, which is in WAVE audio format and is 1 minute 39 seconds long. When opened, it plays the national anthem.&lt;/p&gt;
&lt;p&gt;It&apos;s always good to check a file&apos;s metadata when dealing with a steg challenge, as it can often contain hidden information or useful clues on where to go next.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
red@b0x:~/ctfs/akasec/misc$ exiftool -a National_Anthem_of_Palestine.wav
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;exiftool&lt;/code&gt; didn&apos;t yield any useful results back, so we should proceed with analyzing the file using programs such as &lt;code&gt;Audacity&lt;/code&gt; and &lt;code&gt;Sonic Visualizer&lt;/code&gt;. These tools offer more specialized functionalities for examining audio characteristics, such as viewing spectograms.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./audacity_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After opening the file in Audacity, we notice that towards the end, it emits some strange static noises which don&apos;t make sense. This unusual audio pattern could be a possible clue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./audacity_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When changing the view mode from waveform to spectrogram, we notice what appears to be a string embedded at the end of the spectrogram. However, it&apos;s &lt;strong&gt;not&lt;/strong&gt; clearly visible. To better look at it, we should consider using an alternative tool like Sonic Visualizer, which was mentioned before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./sv_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Following the same process as we would in audacity, but adding a few tweaks like expanding the spectogram channels and setting the &lt;code&gt;Threshold&lt;/code&gt; to &lt;code&gt;-68dB&lt;/code&gt; for a more clear view, we easily spot the readable string.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;&lt;code&gt;CFMVSUJD&lt;/code&gt;&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;Great, we found what seems like the password! However, being a casual &lt;code&gt;CTF&lt;/code&gt; player, I went down the rabbit hole trying to figure out if this string was encoded in some weird way, such as &lt;strong&gt;ROT13&lt;/strong&gt; or other ciphers.&lt;/p&gt;
&lt;p&gt;However, it seemed that the password &lt;strong&gt;wasn&apos;t&lt;/strong&gt; encoded in any way. My next educated guess was to try using this password with a tool called &lt;code&gt;steghide&lt;/code&gt; to see if I could extract anything useful.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./extracted.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steghide&lt;/strong&gt; uncovered something interesting, yet when I ran the &lt;code&gt;file&lt;/code&gt; command, it returned &lt;strong&gt;nothing&lt;/strong&gt;, labeling the data as &lt;code&gt;raw&lt;/code&gt;. However, upon running &lt;code&gt;xxd file |head -c 70&lt;/code&gt;, I observed that the file&apos;s &lt;strong&gt;endianness&lt;/strong&gt; was swapped. Furthermore, this new file appears to be a wave file, indicating that we need to do some fixing ourselves.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./term.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There&apos;s two ways to go about this, one would be to write a quick &lt;code&gt;python script&lt;/code&gt; to do the job for us. Another is to use &lt;code&gt;cyberchef&lt;/code&gt;, which is more simpler and faster in my opinion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./chef.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is a quite simple recipe to deal with. We first open the file as input, convert it to &lt;code&gt;hex&lt;/code&gt;, search for operation called &lt;code&gt;Swap endianness&lt;/code&gt; --&amp;gt; set the &lt;code&gt;Data format&lt;/code&gt; to hex and &lt;code&gt;Word length&lt;/code&gt; to &lt;code&gt;16&lt;/code&gt; bytes and finally do &lt;code&gt;From hex&lt;/code&gt; with default options.&lt;/p&gt;
&lt;p&gt;Here&apos;s the recipe param for &lt;strong&gt;CC&lt;/strong&gt;: &lt;code&gt;To_Hex(&apos;Space&apos;,0)Swap_endianness(&apos;Hex&apos;,16,true)From_Hex(&apos;Auto&apos;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As seen in the previous screenshot if everything was done correctly, cyberchef should identify this file as &lt;strong&gt;Waveform Audio&lt;/strong&gt;. The next logical step would be to download it using the &lt;code&gt;save&lt;/code&gt; icon in the middle right.&lt;/p&gt;
&lt;p&gt;Once that is done we can follow the same steps as we did before, getting simple information about this file we know that, it&apos;s way smaller than the previous one. As well as, it&apos;s clear on what&apos;s its doing this time, there appears to be a voice saying &lt;code&gt;Here&apos;s a flag&lt;/code&gt; followed by very high and disturbing sounds.&lt;/p&gt;
&lt;p&gt;Here goes the spectogram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./specto.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once I reached this stage, my initial plan was to integrate a low-pass filter and adjust the decibels during high noise levels to suppress them somewhat. Some progress was made; I even managed to extract the phrase &quot;Here&apos;s the Flag: AKASEC&quot; from the audio. However, disaster struck again and again. This part of the challenge felt like hell as I tried mutltiple simultaneous approaches, ranging from basic &lt;code&gt;strings&lt;/code&gt; commands to &lt;code&gt;400-line demodulation scripts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Though, a few hours later a new hint has been released for this challenge, which helped me quite a lot xD.&lt;/p&gt;
&lt;p&gt;:::note[Hint]
This is a steganography challenge. In the voice audio, the flag hidden in the corrupted part and you must SEE it (it is the reason why it is corrupted). Switch it, a tool is needed.
:::&lt;/p&gt;
&lt;p&gt;Key word there is &lt;strong&gt;&lt;code&gt;SEE&lt;/code&gt;&lt;/strong&gt;, but how is the real question here. Trying out tool&apos;s like &lt;code&gt;foremost&lt;/code&gt; and &lt;code&gt;binwalk -dd&lt;/code&gt; doesen&apos;t give anything, no pngs or jpgs. As mentioned previously this is the harder part of the challenge.&lt;/p&gt;
&lt;p&gt;I have found 2 ways to solve this challenge, &lt;code&gt;intended&lt;/code&gt; and &lt;code&gt;unintended&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Unintended Solution&lt;/h3&gt;
&lt;p&gt;This way forces us to visualize raw data with a popular tool called &lt;code&gt;GIMP&lt;/code&gt; and manually &lt;code&gt;brute-force&lt;/code&gt; offsets until the flag becomes visible, this method can get very time consuming and cause a lot of frustration.&lt;/p&gt;
&lt;p&gt;Only thing to do here is, change the extension of the file we got from cyberchef from &lt;strong&gt;.wav&lt;/strong&gt; to &lt;code&gt;.data&lt;/code&gt;, open gimp and load it as raw data, from there it&apos;s just patience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./gimp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Intended Solution&lt;/h3&gt;
&lt;p&gt;By far easier way to go on solving this challenge, by doing a simple google search &quot;wav2png&quot;. First result that pops out is a website which will automatically convert waveform to png, without having to guess offsets &lt;code&gt;xD&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://directmusic.me/wav2png/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(shoutout to &lt;strong&gt;suvoni&lt;/strong&gt; for finding this tool)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./wav2png.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;:::caution[FLAG]
&lt;code&gt;AKASEC{h1dd3n_1n_r4w}&lt;/code&gt;
:::&lt;/p&gt;
&lt;p&gt;Thanks for reading this write-up! I hope you learned something new, because I sure did. This &lt;strong&gt;CTF&lt;/strong&gt; was well organized with diverse challenge categories, great admins and high quality challs. Looking forward to next year 👀&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stoked to come in 🥇1st place with my team!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./score.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Till next time~&lt;/strong&gt;&lt;/p&gt;
</content:encoded></item><item><title>HackTheBox - Strike Back [Forensics]</title><link>https://fuwari.vercel.app/posts/htb-sb/strikeback/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/htb-sb/strikeback/</guid><pubDate>Thu, 06 Jun 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::warning[Description]
&lt;strong&gt;A fleet of steam blimps waits the final signal from their commander in order to attack gogglestown kingdom. Recent cyber attack had us thinking if the enemy managed to discover our plans and prepare a counter-attack. Will the fleet get ambused???&lt;/strong&gt;
:::&lt;/p&gt;
&lt;p&gt;For this challenge we are given a zip file containing two challenge attachments: a &lt;code&gt;capture.pcapng&lt;/code&gt; &lt;strong&gt;(network capture file)&lt;/strong&gt;  and &lt;code&gt;freesteam.dmp&lt;/code&gt; &lt;strong&gt;(Mini DuMP crash report)&lt;/strong&gt;. For those who haven’t worked with minidump files before, these types of files are generally generated from application process memory when an application crashes. They contain essential information needed to diagnose and debug the issue, such as the call stack, loaded modules, and the state of various system variables at the time of the crash.&lt;/p&gt;
&lt;p&gt;Since we&apos;re dealing with a forensics challenge, let&apos;s first get the SHA-256 checksum of the file and try uploading the hash to popular services like VirusTotal to see the results. This will help us determine if the file has already been analyzed and if there are any known security issues associated with it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;red@b0x:~/ctfs/htb-forensics$ sha256sum freesteam.dmp 

67527ad19ba7c3b363a4b6fa6ad8664e77ce65dc7f8b628b93338851f09805df  freesteam.dmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;./vt.png&quot; alt=&quot;Virus-Total&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Two Security Vendors have identified this crashdump being apart of the &lt;a href=&quot;https://attack.mitre.org/software/S0154/&quot;&gt;Cobalt Strike&lt;/a&gt; beacon. Cobalt Strike is a tool frequently used by offensive security professionals to conduct adversary simulations and execute attacks that mimic real-world threat actors.&lt;/p&gt;
&lt;p&gt;While this finding appears promising, we should approach it with caution, as only a limited number of vendors have flagged it as malicious. Therefore, let&apos;s proceed with analyzing the packet capture file in the meantime.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./pcap1.png&quot; alt=&quot;PCAP-1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;👀 Upon opening the packet capture file and inspecting &lt;code&gt;tcp.stream eq 0&lt;/code&gt;, I immediately noticed a &lt;strong&gt;GET&lt;/strong&gt; request to the IPv4 address &lt;code&gt;192.168.1.9&lt;/code&gt; over port &lt;code&gt;8080&lt;/code&gt;, attempting to retrieve an executable file named &lt;code&gt;freesteam.exe&lt;/code&gt;. If this doesn&apos;t appear malicious, I don&apos;t know what does. Let&apos;s quickly pull that executable out of the capture and see what &lt;code&gt;VirusTotal&lt;/code&gt; has to say about it.&lt;/p&gt;
&lt;p&gt;:::note&lt;/p&gt;
&lt;p&gt;While exporting the executable, I also noticed several &lt;strong&gt;POST&lt;/strong&gt; requests to the URI &lt;code&gt;submit.php?id=1909272864&lt;/code&gt;. As someone who has dissected multiple Cobalt Strike payloads, I can confirm that this behavior is very common. The id parameter is typically randomly generated and is used with the default profile, which makes it easier to write network-based signatures for malicious traffic.
:::&lt;/p&gt;
&lt;p&gt;Using Wireshark&apos;s &lt;code&gt;Export HTTP Objects&lt;/code&gt; feature, I extracted the suspicious executable and then ran &lt;code&gt;md5sum&lt;/code&gt; to generate the file hash:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;red@b0x:~/ctfs/htb-forensics$ md5sum freesteam.exe 

10d01baf19d5d2448799e440095a8035  freesteam.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uploading the &lt;strong&gt;MD5&lt;/strong&gt; hash to VirusTotal has yielded very &lt;strong&gt;concerning&lt;/strong&gt; results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./vt2.png&quot; alt=&quot;vt-2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It appears that we&apos;re making progress. The VirusTotal analysis of the &lt;code&gt;MD5&lt;/code&gt; hash has revealed a high score of &lt;code&gt;65/74&lt;/code&gt;, indicating a high likelihood of malicious activity. Furthermore, the community tab within VT reinforces our suspicions, with indications pointing towards this file actually being a Cobalt Strike beacon.&lt;/p&gt;
&lt;p&gt;Now that we&apos;ve successfully identified the key components to solving this challenge, it&apos;s time to proceed with further analysis. Upon revisiting the packet capture file, we note that there isn&apos;t a big amount of traffic, with only &lt;strong&gt;15 TCP streams&lt;/strong&gt; recorded. However, it&apos;s important to observe that while the traffic appears to be &lt;code&gt;plain-text&lt;/code&gt;, it is not necessarily so. The server and client communications are encrypted.&lt;/p&gt;
&lt;p&gt;One of the logical steps for us to take is to decrypt the traffic. Before we can do that we need to understand how the encryption works on a very surface level.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./diagram.png&quot; alt=&quot;diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The beacon being our &lt;strong&gt;client&lt;/strong&gt; and the Cobalt Strike team-server &lt;strong&gt;(c2)&lt;/strong&gt; are both encrypted with AES, even when the beacon type is set to use &lt;code&gt;HTTPS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;:::note
&lt;strong&gt;Cobalt Strike Supports multiple Listener types/modes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/HTTPS is by far the most common listener type. Which is also the easiest to spot.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS listeners establish sessions to their team server using DNS requests for domains the team server is authoritative for.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are some other ones, but I won&apos;t include those here. Will leave blog posts for reference at the end of this write-up.&lt;/strong&gt;
:::&lt;/p&gt;
&lt;p&gt;While reading other blog post&apos;s I&apos;ve figured that Cobalt Strike stores &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keys in a file called &lt;strong&gt;.cobaltstrike.beacon_keys&lt;/strong&gt;. This file is generated when Cobalt Strike is ran for the first time on the system.&lt;/p&gt;
&lt;p&gt;Alright, enough discussion—let&apos;s proceed with decrypting the traffic. There are multiple ways to approach this. One method involves using a tool called &lt;code&gt;cs-extract-key.py&lt;/code&gt; to pull metadata that contains the AES and HMAC keys from the Mini DuMP crash report. While this method is not guaranteed to work in every case, as it requires the beacon to be version 3 with unencrypted RSA metadata, it&apos;s worth attempting. Let&apos;s see if we can extract the necessary keys and use them to decrypt the traffic.&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;DidierStevens/Beta&quot;}&lt;/p&gt;
&lt;p&gt;The full script can be found in this GitHub repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./try1.png&quot; alt=&quot;try1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It appears we didn&apos;t retrieve any keys, which suggests that the beacon version is &lt;code&gt;4&lt;/code&gt;, not 3. We shouldn&apos;t feel defeated in this scenario; there is actually another way to obtain the keys. We can extract the &lt;code&gt;encrypted&lt;/code&gt; data from the first &lt;strong&gt;POST&lt;/strong&gt; request of the beacon to the C2 (callback). This data may contain the necessary information for decrypting the traffic.&lt;/p&gt;
&lt;p&gt;We can use a simple wireshark filter to get the first POST request. &lt;code&gt;http.request.method == POST&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./shark.png&quot; alt=&quot;shark&quot; /&gt;&lt;/p&gt;
&lt;p&gt;According to the author of &lt;code&gt;cs-extract-key.py&lt;/code&gt;, we can pass the &lt;strong&gt;encrypted&lt;/strong&gt; string to the tool using the -c switch. The tool will then perform a dictionary attack to extract all possible AES and HMAC keys. If everything goes well, we should obtain the correct keys.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./keys.png&quot; alt=&quot;keys&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Awesome, it seems like everything worked smoothly. Our next step is to use a different script &lt;code&gt;cs-parse-http-traffic.py&lt;/code&gt; to parse the encrypted traffic directly from the packet capture, using the HMAC and AES keys we found. This will allow us to decrypt and analyze the communication between the beacon and the C2 server, which could possibly have the flag we&apos;re looking for!&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HMAC:bf2d35c0e9b64bc46e6d513c1d0f6ffe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AES:3ae7f995a2392c86e3fa8b6fbc3d953a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Woah! It successfully decrypted the traffic. Looking at the results, we observe some interesting behavior, such as the dumping of password hashes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./hashes.png&quot; alt=&quot;hashes&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I tried cracking those password hashes with CrackStation, but didn&apos;t get any useful results back. This suggests that we might be missing something obvious.&lt;/p&gt;
&lt;p&gt;Taking &lt;strong&gt;another&lt;/strong&gt; look at the decrypted data: we spot this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Packet number: 224
HTTP request POST
http://192.168.1.9/submit.php?id=1909272864
Length raw data: 324
Counter: 6
Callback: 22 TODO
b&apos;\xff\xff\xff\xfe&apos;
-----------------------------------------------------------------------------
C:\Users\npatrick\Desktop\*
D       0       11/19/2021 12:24:08     .
D       0       11/19/2021 12:24:08     ..
F       5175    11/11/2021 03:24:13     cheap_spare_parts_for_old_blimps.docx
F       282     11/10/2021 07:02:24     desktop.ini
F       24704   11/11/2021 03:22:16     gogglestown_citizens_osint.xlsx
F       62393   11/19/2021 12:24:10     orders.pdf

------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those document files look confidential; let&apos;s try pulling them right now using the &lt;code&gt;--extract&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./extracted.png&quot; alt=&quot;files&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We&apos;ve gotten 6 files, let&apos;s transfer those on a linux machine &lt;strong&gt;(my localhost)&lt;/strong&gt; to see which one is which. I&apos;m going to make a shared folder between my host and vm, for an easier transfer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./flag.png&quot; alt=&quot;host&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now if we open that &lt;code&gt;PDF&lt;/code&gt; we get the flag!&lt;/p&gt;
&lt;p&gt;:::caution[FLAG]
&lt;code&gt;HTB{Th4nk_g0d_y0u_f0und_1t_0n_T1m3!!!!}&lt;/code&gt;
:::&lt;/p&gt;
&lt;p&gt;Thank you for reading this post! I hope you found it informative and learned something new. Dissecting Cobalt Strike traffic can be fascinating and educational. I appreciate your time and interest. Until next time~&lt;/p&gt;
</content:encoded></item><item><title>NahamCon CTF 2023 - IR [Forensics]</title><link>https://fuwari.vercel.app/posts/nahamconctf-23/ir/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/nahamconctf-23/ir/</guid><pubDate>Thu, 15 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;chall.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As always let’s download the files from the challenge description. For this category the download was huge with a &lt;strong&gt;&lt;code&gt;.zip&lt;/code&gt;&lt;/strong&gt; file being around 13GB.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;download.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once we have the wanted files on our machine, it’s about time to see what we are working with. Checking out the file extension we quickly know its a Virtual Machine. To open such file we would need to use a hypervisor of our own choice , in my case being &lt;strong&gt;&lt;code&gt;VirtualBox&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;import.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Great, we are doing something right. One thing to note out of this is the &lt;strong&gt;&lt;code&gt;Description&lt;/code&gt;&lt;/strong&gt; of the VM. Credentials: &lt;strong&gt;&lt;code&gt;IEUser:Passw0rd!&lt;/code&gt;&lt;/strong&gt;. Let’s sign in and see if we can answer the questions!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;win.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Interesting, we got a Windows 10 VM that has by the looks some encrypted files on the Desktop. Time to start digging down the rabbit hole. Our first question is Can you find the hidden file on this VM?. For this part we can use an option &lt;strong&gt;&lt;code&gt;Hidden Items&lt;/code&gt;&lt;/strong&gt; in the file explorer to look for hidden directories and files. That can be done so with &lt;strong&gt;File Explorer –&amp;gt; View –&amp;gt; Hidden items&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;hidden.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After some digging around the common directories, I found something that was worth my look &lt;strong&gt;&lt;code&gt;C:\Users\IEUser\Documents\hidden\directory&lt;/code&gt;&lt;/strong&gt;. This directory contained a Ransom Note, when opening it we see the first flag to our question !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 1: flag{053692b87622817f361d8ef27482cc5c}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Okay, amazing we answered &lt;code&gt;1/5&lt;/code&gt; questions and got the flag. We are not stopping here though ! Our second question is Can you figure out how the malware got onto the system? For this one I asked myself “What is the most common way to deliver malware to an induvidual?, the first thought that came up was VIA &lt;strong&gt;&lt;code&gt;Mail&lt;/code&gt;&lt;/strong&gt;. So let’s quickly check the mailbox on the machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;mail.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;By the looks it was a &lt;strong&gt;&lt;code&gt;Phishing Attack&lt;/code&gt;&lt;/strong&gt;, which told the user that the Powershell script provided was to update the system. We now know that the malware got delivered via mail and not only that we also got our second flag &lt;code&gt;2/5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 2: flag{75f086f265fff161f81874c6e97dee0c}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our third question was Can you reverse the malware?. Of course we can &lt;strong&gt;!&lt;/strong&gt; First things first, we need to get the sample and handle it with safety. I’ll be taking a snapshot of my VM incase things go down the wrong road. Once that is done, its about time to check the sample out which can found in &lt;strong&gt;&lt;code&gt;C:\Users\IEUser\Downloads\updates.ps1&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;fps.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I was expecting this script to be &lt;strong&gt;obfuscated&lt;/strong&gt; but not in this type of way. Awhile ago I was watching a DEFCON talk on different type of ways to obfuscate powershell scripts, and I do for sure recall seeing something like this. I tried deobfuscating it using tools found on &lt;code&gt;GitHub&lt;/code&gt; but did not have any luck. After some research online I found that &lt;strong&gt;ScriptBlock Logging&lt;/strong&gt; is a very effective way to defeat this type of obfuscation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;deob.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Running the command &lt;strong&gt;&lt;code&gt;Get-WinEvent -LogName Microsoft-Windows-PowerShell/Operational | % Message &amp;gt; text.txt&lt;/code&gt;&lt;/strong&gt; helps up enable the logs of ran powershell scripts and possibly deobfuscate the powershell script! Which in this case ended up giving us a favour.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;mal.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I copied the deobfuscated script on my machine to further analyze it, by taking a closer look its doing exactly what I thought it would do, encrypt the files. We are not really interested in that as of now, what to really note here is the &lt;strong&gt;Cipher Secret&lt;/strong&gt;. If we have that , we can decrypt our files back. Not only that but we also got the flag for the third question &lt;strong&gt;&lt;code&gt;3/5&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 3: flag{892a8921517dcecf90685d478aedf5e2}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can also knock down question 4 right now. Since we see that the script is exfiltrating data to a URL &lt;code&gt;hxxps://www.thepowershellhacker.com/exfiltration&lt;/code&gt;. Though we need to get the MD5sum of the url. This can be done like this 4/5.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;flag4.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 4: flag{32c53185c3448169bae4dc894688d564}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This has been a ride so far! Time to finish off the last question &lt;strong&gt;Can you please recover our files?&lt;/strong&gt; for this we would have to write a simple script to decrypt the files on the desktop. This might be hard to see for mobile users but here goes nothing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;decc.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Save the script to the Desktop and hope it runs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;final.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Woah that was a very good sign, lets open the pdfs up and see if we can catch the flag inside one of them. Opening &lt;code&gt;GlowSoothe.pdf&lt;/code&gt; did not contain the flag but &lt;code&gt;NexGenInnovations.pdf&lt;/code&gt; for sure did ! It was very hidden, written with tiny text at the very bottom of the last page but I still managed to catch it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;yup.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 5: flag{593f1527d6b3b9e7da9bdc431772d32f}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading this write-up! My team is very satisfied with our performance during this ctf, coming 24th out of 2,000+ teams! I enjoyed this category a lot and I really hope to see something like this next year !&lt;/p&gt;
</content:encoded></item><item><title>UIUCTF 2023 - Tornado Warning [Radio]</title><link>https://fuwari.vercel.app/posts/uiuctf/tornado-warning/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/uiuctf/tornado-warning/</guid><pubDate>Mon, 03 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;chal.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here we go again, let’s first download the file from the challenge attachments and see what we are working with this time. Once the file is on our machine its time to run the &lt;code&gt;file&lt;/code&gt; command to determine the type and it might be useful to run &lt;code&gt;exiftool&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;fileo.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Doing simple checks tells us that the file is valid and flag is for sure hidden inside the &lt;code&gt;.wav&lt;/code&gt; file, but what can we do next ? My next step was to check it out inside &lt;strong&gt;AUDACITY&lt;/strong&gt; and view the spectogram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;spec.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once that was done, I didn’t achieve anything. After all this challenge is not related to Steganography in anyway and even if it was, there would definitely be more steps to it, regarding the challenge difficulty. My next step was to play the WAVE file and listen to it carefully. I quickly realized that this was a severe weather alert message. If anyone is wondering, this is how it sounds &lt;code&gt;https://www.youtube.com/watch?v=VPGczKUlgd8&lt;/code&gt; . So what’s next ? RESEARCH of course ! After some googling around I found an interesting protocol &lt;code&gt;SAME&lt;/code&gt; this protocol stands for &lt;strong&gt;Specific Message Area Encoding&lt;/strong&gt; which is used by the Weather Radios in USA and Canada, as well as the &lt;strong&gt;Emergency Alert System&lt;/strong&gt; on television and radio.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;info.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You may ask “but how can we be sure its the right protocol used for this challenge ?” . Well remember how I said the spectogram did not mean anything ? It actually did mean a lot to us , as it shows the actual structure of the &lt;strong&gt;SAME&lt;/strong&gt; message transmitted over the radio. The first 3 data bursts contain a digital &lt;code&gt;message&lt;/code&gt; packet followed by a long alert tone which is &lt;strong&gt;then&lt;/strong&gt; followed by the actual announcement message. Amazing :) now we have an idea what we need to do, is to decode the message and see what it was transmitting. I found a decoder online which I will use &lt;strong&gt;&lt;code&gt;SeaTTY&lt;/code&gt;&lt;/strong&gt;, but it was for windows only so… let me start up my virtual machine really quick and I’ll get back to you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;seat.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Okay this is going pretty well , we are learning ! One thing to note here is to select the &lt;strong&gt;&lt;code&gt;NWR-SAME&lt;/code&gt;&lt;/strong&gt; mode for the decoder. Once that was done we play the message and pray it works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;fdcode.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That is exactly what I was waiting for. We got the proper decoded data bursts from the SAME protocol.&lt;/p&gt;
&lt;p&gt;Which are :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ZCZC-UXU-TFR-R18007ST_45-0910BR5-KIND3RWS-
ZCZC-WIR-TO{3018W0R+00T5-09UT115-K_EV/NWS-
ZCZC-WXRCTOR-0D_007+004OR_O1011E@KIND/N}S-
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I’ve done some research online on how these messages are structured, I can explain on what each part means, but first thing before I forget. We need to know that it will repeat three times to try to possibly eliminate any errors from poor reception. The correct data will be chosen using a columnar parity error algorithm. Therefore &lt;code&gt;ZCZC&lt;/code&gt; is the &lt;strong&gt;Message Activation&lt;/strong&gt; Code after that comes &lt;code&gt;WXR&lt;/code&gt; which is the Originator for example &lt;strong&gt;NOAA Weather Radio&lt;/strong&gt;, followed by that we have TOR which means it is a &lt;strong&gt;Tornado Warning&lt;/strong&gt;, the first &lt;code&gt;-******&lt;/code&gt; can mean pretty much anything and so do the other ones. Below I will add a few images so that we can better understand the concept. As well as, a youtube video which goes in depth.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;u1.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;u2.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;https://www.youtube.com/watch?v=OpLFRGcm7_k&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At this point I needed to find a tool to decode the message and I did.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;full.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The National Weather Service in Indianapolis, Indiana has issued a Tornado Warning valid until 10:00 PM for the following counties in Indiana: Benton. (KIND/NWS)&lt;/strong&gt; . UHHH what where is the flag? This really got me confused so I decided to open the ticket with the organizers for a sanity check and I got this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;lol.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Found it pretty funny, but seems like we need to go back and see what we are working with. After staring down on the decoded strings something clicked in my head and I saw the pattern for the flag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ZCZC-UXU-TFR-R18007ST_45-0910BR5-KIND3RWS-
ZCZC-WIR-TO{3018W0R+00T5-09UT115-K_EV/NWS-
ZCZC-WXRCTOR-0D_007+004OR_O1011E@KIND/N}S-
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Taking a look again there is one unique character that is different in each message so we need to grab it one by one and build it to the flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;flag.png&quot; alt=&quot;Could N0t B3 L04d3d :(&quot; /&gt;&lt;/p&gt;
&lt;p&gt;WHEW ! That was very fun :) we got the flag and the valuable points that my team needed to come 33rd out of 1200+ teams. Special shoutout to my teammates &lt;strong&gt;Suvoni&lt;/strong&gt; and &lt;strong&gt;kibeththewalker&lt;/strong&gt; for sticking around with me for this challenge &lt;code&gt;GG !&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::caution[Flag]
&lt;strong&gt;&lt;code&gt;uiuctf{3RD_W0RST_TOR_OUTBRE@K_EV3R}&lt;/code&gt;&lt;/strong&gt;
:::&lt;/p&gt;
</content:encoded></item></channel></rss>