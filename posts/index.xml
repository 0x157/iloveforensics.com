<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 0x157</title>
    <link>https://iloveforensics.com/posts/</link>
    <description>Recent content in Posts on 0x157</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://iloveforensics.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>  UIUCTF 2023 - Tornado Warning [Radio Frequency]</title>
      <link>https://iloveforensics.com/posts/uiuctf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iloveforensics.com/posts/uiuctf/</guid>
      <description>Difficulty Category     Extreme RADIO FREQ    Here we go again, let’s first download the file from the challenge attachments and see what we are working with this time. Once the file is on our machine its time to run the file command to determine the type and it might be useful to run exiftool as well.
Doing simple checks tells us that the file is valid and flag is for sure hidden inside the .</description>
      <content>&lt;p&gt;&lt;img src=&#34;chal.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Extreme&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;RADIO FREQ&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here we go again, let’s first download the file from the challenge attachments and see what we are working with this time. Once the file is on our machine its time to run the &lt;code&gt;file&lt;/code&gt; command to determine the type and it might be useful to run &lt;code&gt;exiftool&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;fileo.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Doing simple checks tells us that the file is valid and flag is for sure hidden inside the &lt;code&gt;.wav&lt;/code&gt; file, but what can we do next ? My next step was to check it out inside &lt;strong&gt;AUDACITY&lt;/strong&gt; and view the spectogram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;spec.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once that was done, I didn’t achieve anything. After all this challenge is not related to Steganography in anyway and even if it was, there would definitely be more steps to it, regarding the challenge difficulty. My next step was to play the WAVE file and listen to it carefully. I quickly realized that this was a severe weather alert message. If anyone is wondering, this is how it sounds &lt;code&gt;https://www.youtube.com/watch?v=VPGczKUlgd8&lt;/code&gt; . So what’s next ? RESEARCH of course ! After some googling around I found an interesting protocol &lt;code&gt;SAME&lt;/code&gt; this protocol stands for &lt;strong&gt;Specific Message Area Encoding&lt;/strong&gt; which is used by the Weather Radios in USA and Canada, as well as the &lt;strong&gt;Emergency Alert System&lt;/strong&gt; on television and radio.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;info.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;You may ask “but how can we be sure its the right protocol used for this challenge ?” . Well remember how I said the spectogram did not mean anything ? It actually did mean a lot to us , as it shows the actual structure of the &lt;strong&gt;SAME&lt;/strong&gt; message transmitted over the radio. The first 3 data bursts contain a digital &lt;code&gt;message&lt;/code&gt; packet followed by a long alert tone which is &lt;strong&gt;then&lt;/strong&gt; followed by the actual announcement message. Amazing :) now we have an idea what we need to do, is to decode the message and see what it was transmitting. I found a decoder online which I will use &lt;strong&gt;&lt;code&gt;SeaTTY&lt;/code&gt;&lt;/strong&gt;, but it was for windows only so… let me start up my virtual machine really quick and I’ll get back to you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;seat.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Okay this is going pretty well , we are learning ! One thing to note here is to select the &lt;strong&gt;&lt;code&gt;NWR-SAME&lt;/code&gt;&lt;/strong&gt; mode for the decoder. Once that was done we play the message and pray it works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;fdcode.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;That is exactly what I was waiting for. We got the proper decoded data bursts from the SAME protocol. Which are :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ZCZC-UXU-TFR-R18007ST_45-0910BR5-KIND3RWS-
ZCZC-WIR-TO{3018W0R+00T5-09UT115-K_EV/NWS-
ZCZC-WXRCTOR-0D_007+004OR_O1011E@KIND/N}S-
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since I’ve done some research online on how these messages are structured, I can explain on what each part means, but first thing before I forget. We need to know that it will repeat three times to try to possibly eliminate any errors from poor reception. The correct data will be chosen using a columnar parity error algorithm. Therefore &lt;code&gt;ZCZC&lt;/code&gt; is the &lt;strong&gt;Message Activation&lt;/strong&gt; Code after that comes &lt;code&gt;WXR&lt;/code&gt; which is the Originator for example &lt;strong&gt;NOAA Weather Radio&lt;/strong&gt;, followed by that we have TOR which means it is a &lt;strong&gt;Tornado Warning&lt;/strong&gt;, the first &lt;code&gt;-******&lt;/code&gt; can mean pretty much anything and so do the other ones. Below I will add a few images so that we can better understand the concept. As well as, a youtube video which goes in depth.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;u1.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;u2.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;https://www.youtube.com/watch?v=OpLFRGcm7_k&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At this point I needed to find a tool to decode the message and I did.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;full.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The National Weather Service in Indianapolis, Indiana has issued a Tornado Warning valid until 10:00 PM for the following counties in Indiana: Benton. (KIND/NWS)&lt;/strong&gt; . UHHH what where is the flag? This really got me confused so I decided to open the ticket with the organizers for a sanity check and I got this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lol.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Found it pretty funny, but seems like we need to go back and see what we are working with. After staring down on the decoded strings something clicked in my head and I saw the pattern for the flag.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ZCZC-UXU-TFR-R18007ST_45-0910BR5-KIND3RWS-
ZCZC-WIR-TO{3018W0R+00T5-09UT115-K_EV/NWS-
ZCZC-WXRCTOR-0D_007+004OR_O1011E@KIND/N}S-
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Taking a look again there is one unique character that is different in each message so we need to grab it one by one and build it to the flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;flag.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;WHEW ! That was very fun :) we got the flag and the valuable points that my team needed to come 33rd out of 1200+ teams. Special shoutout to my teammates &lt;strong&gt;Suvoni&lt;/strong&gt; and &lt;strong&gt;kibeththewalker&lt;/strong&gt; for sticking with me for this challenge &lt;code&gt;GG !&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG: uiuctf{3RD_W0RST_TOR_OUTBRE@K_EV3R}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title> NahamCon CTF 2023 - Incident Response Challenges [DFIR]</title>
      <link>https://iloveforensics.com/posts/nahamcon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iloveforensics.com/posts/nahamcon/</guid>
      <description>Difficulty Category     Medium Forensics    As always let’s download the files from the challenge description. For this category the download was huge with a .zip file being around 13GB.
Once we have the wanted files on our machine, it’s about time to see what we are working with. Checking out the file extension we quickly know its a Virtual Machine. To open such file we would need to use a hypervisor of our own choice , in my case being VirtualBox.</description>
      <content>&lt;p&gt;&lt;img src=&#34;chall.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Forensics&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always let’s download the files from the challenge description. For this category the download was huge with a &lt;strong&gt;&lt;code&gt;.zip&lt;/code&gt;&lt;/strong&gt; file being around 13GB.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;download.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we have the wanted files on our machine, it’s about time to see what we are working with. Checking out the file extension we quickly know its a Virtual Machine. To open such file we would need to use a hypervisor of our own choice , in my case being &lt;strong&gt;&lt;code&gt;VirtualBox&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;import.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Great, we are doing something right. One thing to note out of this is the &lt;strong&gt;&lt;code&gt;Description&lt;/code&gt;&lt;/strong&gt; of the VM. Credentials: &lt;strong&gt;&lt;code&gt;IEUser:Passw0rd!&lt;/code&gt;&lt;/strong&gt;. Let’s sign in and see if we can answer the questions!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;win.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Interesting, we got a Windows 10 VM that has by the looks some encrypted files on the Desktop. Time to start digging down the rabbit hole. Our first question is Can you find the hidden file on this VM?. For this part we can use an option &lt;strong&gt;&lt;code&gt;Hidden Items&lt;/code&gt;&lt;/strong&gt; in the file explorer to look for hidden directories and files. That can be done so with &lt;strong&gt;File Explorer –&amp;gt; View –&amp;gt; Hidden items&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;hidden.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;After some digging around the common directories, I found something that was worth my look &lt;strong&gt;&lt;code&gt;C:\Users\IEUser\Documents\hidden\directory&lt;/code&gt;&lt;/strong&gt;. This directory contained a Ransom Note, when opening it we see the first flag to our question !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 1: flag{053692b87622817f361d8ef27482cc5c}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Okay, amazing we answered &lt;code&gt;1/5&lt;/code&gt; questions and got the flag. We are not stopping here though ! Our second question is Can you figure out how the malware got onto the system?. For this one I asked myself “What is the most common way to deliver malware to an induvidual? , the first thought that came up was VIA &lt;strong&gt;&lt;code&gt;Mail&lt;/code&gt;&lt;/strong&gt;. So let’s quickly check the mailbox on the machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mail.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;By the looks it was a &lt;strong&gt;&lt;code&gt;Phishing Attack&lt;/code&gt;&lt;/strong&gt;, which told the user that the Powershell script provided was to update the system. We now know that the malware got delivered via mail and not only that we also got our second flag &lt;code&gt;2/5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 2: flag{75f086f265fff161f81874c6e97dee0c}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our third question was Can you reverse the malware?. Of course we can &lt;strong&gt;!&lt;/strong&gt; First things first, we need to get the sample and handle it with safety. I’ll be taking a snapshot of my VM incase things go down the wrong road. Once that is done, its about time to check the sample out which can found in &lt;strong&gt;&lt;code&gt;C:\Users\IEUser\Downloads\updates.ps1&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;fps.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;I was expecting this script to be &lt;strong&gt;obfuscated&lt;/strong&gt; but not in this type of way. Awhile ago I was watching a DEFCON talk on different type of ways to obfuscate powershell scripts, and I do for sure recall seeing something like this. I tried deobfuscating it using tools found on &lt;code&gt;GitHub&lt;/code&gt; but did not have any luck. After some research online I found that &lt;strong&gt;ScriptBlock Logging&lt;/strong&gt; is a very effective way to defeat this type of obfuscation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;deob.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Running the command &lt;strong&gt;&lt;code&gt;Get-WinEvent -LogName Microsoft-Windows-PowerShell/Operational | % Message &amp;gt; text.txt&lt;/code&gt;&lt;/strong&gt; helps up enable the logs of ran powershell scripts and possibly deobfuscate the powershell script! Which in this case ended up giving us a favour.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mal.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;I copied the deobfuscated script on my machine to further analyze it, by taking a closer look its doing exactly what I thought it would do, encrypt the files. We are not really interested in that as of now, what to really note here is the &lt;strong&gt;Cipher Secret&lt;/strong&gt;. If we have that , we can decrypt our files back. Not only that but we also got the flag for the third question &lt;strong&gt;&lt;code&gt;3/5&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 3: flag{892a8921517dcecf90685d478aedf5e2}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can also knock down question 4 right now. Since we see that the script is exfiltrating data to a URL &lt;code&gt;hxxps://www.thepowershellhacker.com/exfiltration&lt;/code&gt;. Though we need to get the MD5sum of the url. This can be done like this 4/5.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;flag4.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 4: flag{32c53185c3448169bae4dc894688d564}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This has been a ride so far! Time to finish off the last question &lt;strong&gt;Can you please recover our files?&lt;/strong&gt; for this we would have to write a simple script to decrypt the files on the desktop. This might be hard to see for mobile users but here goes nothing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;decc.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Save the script to the Desktop and hope it runs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;final.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Woah that was a very good sign, lets open the pdfs up and see if we can catch the flag inside one of them. Opening &lt;code&gt;GlowSoothe.pdf&lt;/code&gt; did not contain the flag but &lt;code&gt;NexGenInnovations.pdf&lt;/code&gt; for sure did ! It was very hidden, written with tiny text at the very bottom of the last page but I still managed to catch it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;yup.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FLAG 5: flag{593f1527d6b3b9e7da9bdc431772d32f}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading this write-up! My team is very satisfied with our performance during this ctf, coming 24th out of 2,000+ teams! I myself enjoyed this category a lot and I really hope to see something like this next year !&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>BYUCTF 2023 - VMception [Forensics] Write-up</title>
      <link>https://iloveforensics.com/posts/byuctf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iloveforensics.com/posts/byuctf/</guid>
      <description>Difficulty Medium     Category Forensics    Let&amp;rsquo;s begin by quickly downloading the file from the link given in the challenge description. It&amp;rsquo;s 3.2 GB so might take sometime, depends on your internet speed.
Once we got the file on our machine, lets see what type of file .vdi is, and to no surprise its a virtual hard disk of a Virtual Machine. We can simply open it with VirtualBox or VMware.</description>
      <content>&lt;p&gt;&lt;img src=&#34;challenge.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Medium&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt;
&lt;td&gt;Forensics&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s begin by quickly downloading the file from the link given in the challenge description. It&amp;rsquo;s 3.2 GB so might take sometime, depends on your internet speed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;init.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we got the file on our machine, lets see what type of file &lt;code&gt;.vdi&lt;/code&gt; is, and to no surprise its a virtual hard disk of a &lt;strong&gt;Virtual Machine&lt;/strong&gt;. We can simply open it with VirtualBox or VMware. So that was my next step. For this part we can just sign in with the credentials that were given in the challenge description. &lt;code&gt;cosmo:password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;vm.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once I was logged in, I started looking for the flag in different spaces, whether it was checking mounted file systems, crontabs, configuration files, using find &lt;code&gt;find / -name &amp;quot;*.txt&amp;quot; -type f -exec cat {} \; 2&amp;gt; /dev/null | grep &amp;quot;byuctf{&amp;quot;&lt;/code&gt;. None of it worked and I started getting frustrated. At this point I had an interesting idea to convert a virtual disk to a raw disk image so I have a chance to see what really was happening on this machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;convert.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;qemu-img convert -f vdi -O raw vmception.vdi vmdisk.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before I decided to jump any further, I needed to see if the raw disk is valid and worth my time. That can be done with &lt;code&gt;mmls&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;red@b0x:~/ctf/byuctf&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ mmls vmdisk.raw 
DOS Partition Table
Offset Sector: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Units are in 512-byte sectors

      Slot      Start        End          Length       Description
000:  Meta      &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000001&lt;/span&gt;   Primary Table &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#0)&lt;/span&gt;
001:  -------   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000002047&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000002048&lt;/span&gt;   Unallocated
002:  000:000   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000002048&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0039942143&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0039940096&lt;/span&gt;   Linux &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x83&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
003:  -------   &lt;span style=&#34;color:#ae81ff&#34;&gt;0039942144&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0039944191&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000002048&lt;/span&gt;   Unallocated
004:  Meta      &lt;span style=&#34;color:#ae81ff&#34;&gt;0039944190&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0041940991&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0001996802&lt;/span&gt;   DOS Extended &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x05&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
005:  Meta      &lt;span style=&#34;color:#ae81ff&#34;&gt;0039944190&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0039944190&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000001&lt;/span&gt;   Extended Table &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#1)&lt;/span&gt;
006:  001:000   &lt;span style=&#34;color:#ae81ff&#34;&gt;0039944192&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0041940991&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0001996800&lt;/span&gt;   Linux Swap / Solaris x86 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x82&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
007:  -------   &lt;span style=&#34;color:#ae81ff&#34;&gt;0041940992&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0041943039&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0000002048&lt;/span&gt;   Unallocated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Time to start &lt;strong&gt;AUTOPSY&lt;/strong&gt; and mount the disk for further analysis. Once that was done, I once again looked through the file system for sensitive files, and there it was I found something that helped me understand this challenge even more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;auto.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;/home/notcosmo/.ssh/namespace-dev-wzFc9H/root/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Specifically it was this command that I instantly took note of.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat /bin/ls | gpg --batch --yes 
--passphrase-fd &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; --output ~/your_vm.vdi -d /var/cache/apt/dpkg.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was now time to tear down this command part by part to see what it was doing. We first read the contents of &lt;code&gt;/bin/ls&lt;/code&gt; then pipe &lt;code&gt;|&lt;/code&gt; into a different command, which in our case is &lt;code&gt;gpg --batch --yes --passphrase-fd 0 --output ~/your_vm.vdi -d /var/cache/apt/dpkg.bin&lt;/code&gt;. In simpler words the contents, of &lt;code&gt;ls&lt;/code&gt; are being used to decrypt the &lt;code&gt;dpkg.bin&lt;/code&gt; file which are then outputted to &lt;strong&gt;your_vm.vdi&lt;/strong&gt;. So lets export the &lt;code&gt;.bin&lt;/code&gt; file and try to decrypt it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;export.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just wanna add a little note here, that deleted file had some really funny text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;terminal.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the .bin file was exported I decided to run the same command that was found in .bashrc file earlier to see if I can decrypt another virtual disk. Ill tell you right now, it worked, but if did not, we could of pulled out the &lt;code&gt;ls&lt;/code&gt; binary from the original disk and ran it with that ls instead of the one thats on my machine. Just incase the binaries differed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;exported.vdi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since everything was going fine the way I was doing it. My initial thought was to replicate the same process I just did with the first virtual hard disk. I ran the same qemu command to convert the vdi to a raw disk format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;qemu-img convert -f vdi -O raw exported.vdi another.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;final.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Okay this was really looking promising, I decided to stick with manual disk analysis instead of using &lt;strong&gt;Autopsy&lt;/strong&gt; again. So let&amp;rsquo;s grab the start offset of the &lt;code&gt;Linux (0x83)&lt;/code&gt; partition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;fls -o &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; another.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;offset.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;fls -o &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; another.raw &lt;span style=&#34;color:#ae81ff&#34;&gt;913922&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;almost.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;When I seen this, got pretty excited not even gonna lie. Now let&amp;rsquo;s grab that &lt;code&gt;flag.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;icat -o &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; another.raw &lt;span style=&#34;color:#ae81ff&#34;&gt;913942&lt;/span&gt; &amp;gt; flag.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;gg.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;FLAG: byuctf{vmsarecool}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;WHOA! That was a challenge , which I really enjoyed. Real shoutout to the challenge dev &lt;code&gt;Echo8358#9560&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;STOKED TO COME 5TH WITH THE BOYS&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;leak.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>PWNME CTF Qualifications - Silver [Forensics] Write-up</title>
      <link>https://iloveforensics.com/posts/pwnmectf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iloveforensics.com/posts/pwnmectf/</guid>
      <description>Difficulty Medium     Category Forensics    First things first, lets download the challenge files and extract them if neccesarry. Once that is done with we will see one important file that we are gonna be working with, which is usb_drive.img.
Okay great ! We can now proceed further and examine what we are really working with. Lets see what type of file we just extracted is.</description>
      <content>&lt;p&gt;&lt;img src=&#34;chall.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Medium&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt;
&lt;td&gt;Forensics&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;First things first, lets download the challenge files and extract them if neccesarry. Once that is done with we will see one important file that we are gonna be working with, which is &lt;code&gt;usb_drive.img&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;files.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Okay great ! We can now proceed further and examine what we are really working with. Lets see what type of file we just extracted is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ file usb_drive.img 
usb_drive.img: DOS/MBR boot sector
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that the file type we are working with is known to us, we can surely say its a disk image  with a FAT32 file system. The next step would be to do a read only mount of the disk on our own machine. Which can easily be done with &lt;code&gt;Autopsy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;adding_img.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s exactly what we wanted to see ! Now its time to go further down and see whats inside the file system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;inside_fs.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE &amp;ndash;&amp;gt;&lt;/strong&gt; Those files that we see that are highlighted with red are deleted files on the disk. Which also means they would be the most interesting to look at once recovered. So lets export them to a folder on our machine.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DOING ALL THIS WOULD BE BETTER IN A VM, THAT IS READY TO BE BROKEN. BECAUSE ONCE AGAIN WE ARE DEALING WITH REAL WORLD MALWARE.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;exported.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;This was the part that probably took me the longest to do, and im sure a lot of other teams got stuck on this part for awhile. I examied the &lt;code&gt;.sh&lt;/code&gt; script and it wasnt doing anything interesting that could help us further down in the investigation. On top of that i did full &lt;code&gt;Steganography Analysis&lt;/code&gt; on both , the PDF and PNG, yet i havent found anything. Finally there was one file left which was an &lt;strong&gt;ELF&lt;/strong&gt; executable. It started with basic static analysis of the binary, for example checking strings and throwing it in Ghidra. Later i found out that the binary was written in GoLang and for me it would be pretty hard to Reverse Engineer it, so i decided to try running it inside a VM that is isolated from my host and internal network. Not only that but i also captured traffic on wireshark for potential network based indicators.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I ran this binary throught Virus Total and Hybrid Analysis and both of the vendors flagged it as malicious&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;vm.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Right after this i quickly downloaded Wireshark with &lt;code&gt;sudo apt install wireshark&lt;/code&gt; and was ready to see whats inside this malware.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;network.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets see whats going on in those packets , we see that my host is trying to reach out to &lt;code&gt;178.62.67.181:443&lt;/code&gt;. But it was unsuccessful, instead how about we try to go to the website ourselves. Obviously safety is first so im gonna be using &lt;code&gt;https://www.hidemyass.com/en-us/proxy&lt;/code&gt; to access that website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;flag.png&#34; alt=&#34;Could N0t B3 L04d3d :(&#34;&gt;&lt;/p&gt;
&lt;p&gt;WOAH ! Once we got to the website , we see an image at first my heart dropped because i thought there was gonna be more to it, but once looked at closely i found the flag !&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;PWNME&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1_L0v3_U53_C2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After all this challenge was definetely fun and enjoying in a way. I&amp;rsquo;ve learned to not overthink simplest things and hopefully that will stay with me for the future tournaments with my team.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
